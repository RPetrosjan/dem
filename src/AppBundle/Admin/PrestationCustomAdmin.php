<?php


namespace AppBundle\Admin;

use AppBundle\Form\Type\PrestationDescriptionType;
use Doctrine\ORM\OptimisticLockException;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Show\ShowMapper;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
use Symfony\Component\Form\Extension\Core\Type\TextType;

class PrestationCustomAdmin extends AbstractAdmin
{

    /** @var object|string  */
    private $user;

    /** @var Container  */
    private $container;

    /** @var  */
    private $object;

    /**
     * MesDevisAdmin constructor.
     * @param $object
     * @throws OptimisticLockException
     */
    public function preValidate($object) {

        $this->user = $this->container->get('security.token_storage')->getToken()->getUser();

        // Check if user have a Parent
        if(!is_null($this->user->getParent())) {
            $this->user = $this->user->getParent();
        }

        $object->setUserId($this->user);

        parent::preValidate($object); // TODO: Change the autogenerated stub
    }
    public function getObject($id)
    {
        $object = $this->getModelManager()->findOneBy($this->getClass(), [
            'uuid' => $id
        ]);
        $this->object = $object;
        return $object;
    }

    // We call new function for generating URL sonata
    public function getUrlsafeIdentifier($entity)
    {
        return $this->getNormalizedIdentifier($entity);
    }

    // Here url make new paramters tu URL uuid
    public function getNormalizedIdentifier($entity)
    {
        // If id not exist it wille be create
        if(is_null($entity->getId()))
        {
            return parent::getNormalizedIdentifier($entity);
        }
        // If id exist wie show url with UUID paramter
        else{
            return $entity->getUuid();
        }
    }


    /**
     * @param string $context
     * @return \Sonata\AdminBundle\Datagrid\ProxyQueryInterface
     */
    public function createQuery($context = 'list')
    {

        // Get connected user
        $userEntity = $this->container->get('security.token_storage')->getToken()->getUser();
        // Check if user have owner parent
        if(!is_null($userEntity->getParent())) {
            $userEntity = $userEntity->getParent();
        }

        $query = parent::createQuery($context);
        $alias = $query->getRootAliases()[0];

        // Filtering for only owner user
        $query
            ->where($alias.'.user_id = :user_id')
            ->setParameters([
                'user_id' => $userEntity->getId(),
             ])
            ;

        return $query;
    }

    /**
     * PrestationCustomAdmin constructor.
     */
    public function __construct($code, $class, $baseControllerName, Container $container)
    {
        $this->container = $container;
        parent::__construct($code, $class, $baseControllerName);
    }

    protected function configureFormFields(FormMapper $formMapper)
    {

        $formMapper
            ->add('prestation', TextType::class, [
                'label' => 'Prestation'
            ])
            ->add('chargepar', ChoiceType::class, [
                'label' => $this->trans('prestation.par'),
                'choices' => [
                    'Societe' => 'Societe',
                    'Client'  => 'Client',
                ]
            ])
            ->add('descriptions', CollectionType::class,array(
                'entry_type' => PrestationDescriptionType::class,
                'allow_add' => true,
                'allow_delete' => true,
                'label' => $this->trans('description')
            ))
            ;
        parent::configureFormFields($formMapper); // TODO: Change the autogenerated stub
    }


    protected function configureListFields(ListMapper $list)
    {
        $list
            ->addIdentifier('prestation', null, [
                'route' => [
                    'name' => 'show',
                ]
            ])
            ->addIdentifier('chargepar', null, [
                'label' => $this->trans('prestation.par'),
                'route' => [
                    'name' => 'show',
                ]
            ])

            ->add('_action', 'actions', [
                    'label'=> 'Action',
                    'actions' => array(
                        'show' => [
                            'template' => 'admin/action/show_action.html.twig'
                        ],
                        'edit' => [
                            'template' => 'admin/action/edit_action.html.twig'
                        ],
                        'delete' => [
                            'template' => 'admin/action/remove_action.html.twig'
                        ],
                    )]
            )
            ;
        parent::configureListFields($list); // TODO: Change the autogenerated stub
    }

    protected function configureShowFields(ShowMapper $show)
    {
        $show
            ->add('prestation')
            ->add('chargepar')
            ->add('descriptions')
            ;
        parent::configureShowFields($show); // TODO: Change the autogenerated stub
    }
}